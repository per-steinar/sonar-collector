* SonarQube metrics collector

This is a utility to collect some key numbers for each SonarQube analysis triggered by maven builds.

The purpose of this is to log statistics that shows the improvement of the code quality of the projects over time.

This utility consists of a servlet that serves as a [[https://docs.sonarqube.org/display/SONAR/Webhooks][webhook that is called by Sonar when completing an analysis]].  The webhook POST data doesn't have the necessary information (which are some key metrics of the build).

So when receiving a POST, the servlet will do a callback to the SonarQube REST API to retrieve the metrics, which will then be stored in a PostgreSQL database.

** Status of the project

[[https://travis-ci.org/steinarb/sonar-collector][file:https://travis-ci.org/steinarb/sonar-collector.svg?branch=master]] [[https://coveralls.io/r/steinarb/sonar-collector][file:https://coveralls.io/repos/steinarb/sonar-collector/badge.svg]]


*** SonarCloud

[[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=lines#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=bugs#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=new_bugs#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=vulnerabilities#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=new_vulnerabilities#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=code_smells#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=new_code_smells#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=coverage#.svg]] [[https://sonarcloud.io/dashboard/index/no.priv.bang.sonar.sonar-collector%3Aparent][file:https://sonarcloud.io/api/badges/measure?key=no.priv.bang.sonar.sonar-collector%3Aparent&metric=new_coverage#.svg]]


** How to build the application

Procedure:
 1. Clone the project
    #+BEGIN_EXAMPLE
      mkdir -p ~/git
      cd ~/git
      git clone https://github.com/steinarb/sonar-collector.git
    #+END_EXAMPLE
 2. Build the project with maven
    #+BEGIN_EXAMPLE
      cd ~/git/sonar-collector
      mvn clean install
    #+END_EXAMPLE

** How to install and run the application

This describes how to install and run the program on a debian GNU/linux system.

*** Install the required software

As root, do the following command:
#+BEGIN_EXAMPLE
  apt-get update
  apt-get postgresql install git maven openjdk-8-jdk postgresql ruby ruby-dev build-essential
#+END_EXAMPLE

*** Create the database

Procedure:
 1. Create a PostgreSQL user matching the karaf user:
    #+BEGIN_EXAMPLE
      /bin/sudo -s /bin/bash postgres createuser karaf
    #+END_EXAMPLE
 2. Create an empty database owned by the karaf user:
    #+BEGIN_EXAMPLE
      /bin/sudo -s /bin/bash postgres createdb -O karaf sonarcollector
    #+END_EXAMPLE

*** Install apache karaf

Do the following steps as root
 1. Build the debian package
    #+BEGIN_EXAMPLE
      gem install fpm
      cd /tmp
      git clone https://github.com/steinarb/karaf-deb-packaging
      cd karaf-deb-packaging
      ./dist_karaf.sh
      mkdir -p /root/debs
      cp *.deb /root/debs
    #+END_EXAMPLE
 2. Install the debian package
    #+BEGIN_EXAMPLE
      dpkg --install /tmp/karaf-deb-packaging/karaf_4.1.2-1_all.deb
    #+END_EXAMPLE

*** Install the application in karaf

Procedure:
 1. SSH into karaf
    #+BEGIN_EXAMPLE
      ssh -p 8101 karaf@localhost
    #+END_EXAMPLE
    The password is "karaf" (without the quotes)
 2. In the karaf command shell, add a maven-repo snapshot repo that contains sonarcollector, built by travis CI:
    #+BEGIN_EXAMPLE
      config:edit org.ops4j.pax.url.mvn
      config:property-append org.ops4j.pax.url.mvn.repositories ", https://maven.bang.priv.no/repository/@id=sonar-collector@snapshots, http://maven.vaadin.com/vaadin-addons@id=vaadin"
      config:property-set org.ops4j.pax.url.mvn.globalUpdatePolicy always
      config:update
    #+END_EXAMPLE
 3. Install the application
    #+BEGIN_EXAMPLE
      feature:repo-add mvn:no.priv.bang.sonar.sonar-collector/sonar-collector-webhook/LATEST/xml/features
      feature:install sonar-collector-webhook
    #+END_EXAMPLE

** License

This utility is licensend under the Apache license v. 2.  See the LICENSE file for details.

** List of things left to do

This is my current TODO list for this project.  The list is dynamically added to and checked off, as I do things.  Things that are already done and committed will be removed.

Here's the list [6/8]:
 - [X] Try to remove jackson annotations and figure out if things still work, must be removed from both build dependencies and the karaf feature
   - <2017-11-17 fr 22:46> The code worked fine without jackson annotations
 - [X] Do logging for PostgreSQL connection errors
   - <2017-11-17 fr 21:04> Fixed, the problem was that the order of the injections isn't defined, so the PostgreSQL datasource was injected before the logservice
 - [X] Add database setup to the README
 - [X] Add travis CI build setup
 - [X] Make the database column values be numeric
 - [X] Fix the timestamp
   - <2017-11-19 sø 12:55> The parsed time was in seconds since epoch and not milliseconds since epoch, multipled the value with 1000
 - [ ] Index the columns project_key version_is_release of the measures table
   - <2017-11-19 sø 13:24> The reason for this, is to make the SQL queries stay fast when the number of rows grow large
 - [ ] Add ftp deploy to the travis build setup
